<metroControls:MetroWindow x:Class="TestApp.Views.Windows.MainWindow"
    xmlns:metroControls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ignore="http://www.galasoft.ch/ignore"
    TextElement.FontWeight="Regular"
    TextElement.FontSize="13"
    TextOptions.TextFormattingMode="Ideal"
    TextOptions.TextRenderingMode="Auto"
    mc:Ignorable="d ignore"
    TitleCharacterCasing="Normal"
    WindowStartupLocation="Manual"
    x:Name="This"
    BorderThickness="1"
    ShowIconOnTitleBar="True"
    WindowState="Normal"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:dragablz="http://dragablz.net/winfx/xaml/dragablz"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:controlViewModels="clr-namespace:TestApp.ViewModels.Controls"
    xmlns:controls="clr-namespace:TestApp.Views.Controls"
    xmlns:repository="clr-namespace:TestApp.Repository"
    xmlns:windows="clr-namespace:TestApp.ViewModels.Windows"
    Loaded="OnLoaded" MouseDown="OnMouseDown"
    Title="{Binding ElementName=This, Path=ViewModel.Settings.FormattedTitle, FallbackValue='Title'}"
    Width="{Binding ElementName=This, Path=ViewModel.Settings.Width, Mode=TwoWay, FallbackValue='450'}"
    Left="{Binding ElementName=This, Path=ViewModel.Position.Left, Mode=TwoWay}"
    Top="{Binding ElementName=This, Path=ViewModel.Position.Top, Mode=TwoWay}"
    Height="{Binding ElementName=This, Path=ViewModel.Settings.Height, Mode=TwoWay, FallbackValue='600'}"
    Icon="../../icon.ico"
    MinWidth="300" MinHeight="400"
    DataContext="{Binding ElementName=This, Path=ViewModel}">
    
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Views/Skins/MainSkin.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.SnackBar.xaml" />
                <ResourceDictionary Source="pack://application:,,,/Dragablz;component/themes/mahapps.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style TargetType="{x:Type dragablz:TabablzControl}" BasedOn="{StaticResource MahAppsTabablzControlStyle}" />
        </ResourceDictionary>
    </Window.Resources>

    <materialDesign:DialogHost Identifier="Root">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Menu
                IsMainMenu="True" Height="30">
                
                <MenuItem Header="Файл" Height="30">
                    <MenuItem Header="Перейти к меню" Command="{Binding ElementName=This, Path=ViewModel.ShowMenuCommand}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="FileTree" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="Новый проект"
                        Command="{Binding ElementName=This, Path=ViewModel.NewCommand}"
                        Visibility="{Binding IsInEditMode, Converter={StaticResource BoolToVisibilityConverter}}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="FileOutline" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Открыть проект" Command="{Binding ElementName=This, Path=ViewModel.OpenCommand}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="FolderOutline" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Сохранить проект"
                        Command="{Binding ElementName=This, Path=ViewModel.SaveCommand}"
                        Visibility="{Binding IsInEditMode, Converter={StaticResource BoolToVisibilityConverter}}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="ContentSave" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Сохранить проект как..."
                        Command="{Binding ElementName=This, Path=ViewModel.SaveAsCommand}"
                        Visibility="{Binding IsInEditMode, Converter={StaticResource BoolToVisibilityConverter}}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="ContentSaveAll" />
                        </MenuItem.Icon>
                    </MenuItem>

                    <Separator />
                    <MenuItem Header="Выход" Command="{Binding ElementName=This, Path=ViewModel.CloseCommand}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="ExitToApp" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                
                <MenuItem Header="Вид" Height="30">
                    <MenuItem Header="Панель инструментов" IsCheckable="True"
                        IsChecked="{Binding ElementName=This, Path=ViewModel.CommonSettings.ToolsPanelSettings.IsVisible, Mode=TwoWay}"
                        Visibility="{Binding IsInEditMode, Converter={StaticResource BoolToVisibilityConverter}}"
                        Command="{Binding ChangeVisibilityCommand}"
                        CommandParameter="{x:Type windows:ToolsPanelViewModel}">
                    </MenuItem>
                    <MenuItem Header="Свойства объекта" IsCheckable="True"
                        IsChecked="{Binding ElementName=This, Path=ViewModel.CommonSettings.ObjectBrowserSettings.IsVisible, Mode=TwoWay}"
                        Visibility="{Binding IsInEditMode, Converter={StaticResource BoolToVisibilityConverter}}"
                        Command="{Binding ChangeVisibilityCommand}"
                        CommandParameter="{x:Type windows:ObjectBrowserViewModel}">
                    </MenuItem>
                    <MenuItem Header="Просмотр переменных" IsCheckable="True"
                        IsChecked="{Binding ElementName=This, Path=ViewModel.CommonSettings.VariablesViewerSettings.IsVisible, Mode=TwoWay}"
                        Command="{Binding ChangeVisibilityCommand}"
                        CommandParameter="{x:Type windows:VariablesViewerViewModel}">
                    </MenuItem>
                    <MenuItem Header="Просмотр скриптов" IsCheckable="True"
                        IsChecked="{Binding ElementName=This, Path=ViewModel.CommonSettings.ScriptsViewerSettings.IsVisible, Mode=TwoWay}"
                        Command="{Binding ChangeVisibilityCommand}"
                        CommandParameter="{x:Type windows:ScriptsViewerViewModel}">
                    </MenuItem>
                </MenuItem>

                <MenuItem Header="Действие" Height="30">
                    <MenuItem Header="Заполнить шаблон"
                        Command="{Binding ElementName=This, Path=ViewModel.FillTemplateCommand}"
                        Visibility="{Binding IsInEditMode, Converter={StaticResource InverseBoolToVisConverter}}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="FileWord" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Сброс"
                        Command="{Binding ElementName=This, Path=ViewModel.ResetTemplateCommand}"
                        Visibility="{Binding IsInEditMode, Converter={StaticResource InverseBoolToVisConverter}}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="Autorenew" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Перейти в режим редактирования"
                        Command="{Binding ElementName=This, Path=ViewModel.SwitchToDebugModeCommand}"
                        Visibility="{Binding IsInEditMode, Converter={StaticResource InverseBoolToVisConverter}}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="ModeEdit" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Перейти в режим просмотра"
                        Command="{Binding ElementName=This, Path=ViewModel.SwitchToViewModeCommand}"
                        Visibility="{Binding IsInEditMode, Converter={StaticResource BoolToVisibilityConverter}}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="EyeOutline" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>

                <MenuItem Header="Настройки" Height="30" Command="{Binding ElementName=This, Path=ViewModel.OpenConfigCommand}"/>

                <MenuItem Header="?" Height="30">
                    <MenuItem Header="Справка" Command="{Binding ElementName=This, Path=ViewModel.AboutCommand}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="HelpOutline" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="О программе" Command="{Binding ElementName=This, Path=ViewModel.HelpCommand}">
                        <MenuItem.Icon>
                            <materialDesign:PackIcon Kind="InfoOutline" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
            </Menu>

            <Canvas x:Name="Background"
                Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2"
                Width="{Binding ActualWidth, ElementName=MainCanvas}"
                Height="{Binding ActualHeight, ElementName=MainCanvas}"
                Visibility="{Binding ElementName=This, Path=ViewModel.GridIsVisible, Converter={StaticResource BoolToVisibilityConverter}}" >
            </Canvas>

            <metroControls:MetroTabControl Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2"
                Height="Auto" VerticalAlignment="Stretch"
                Foreground="White"
                metroControls:TabControlHelper.Underlined="TabPanel"
                IsTextSearchEnabled="True"
                SelectedIndex="{Binding SelectedTabIndex, Mode=TwoWay}"
                ItemsSource="{Binding TabItems}"
                TabStripPlacement="Top">

                <metroControls:MetroTabControl.Resources>
                    <Style TargetType="{x:Type metroControls:MetroTabItem}">
                        <!--<Setter Property="CloseButtonEnabled" Value="{Binding ElementName=This, Path=ViewModel.IsInEditMode}"/>-->
                        <Setter Property="CloseButtonEnabled" Value="False"/>
                        <Setter Property="metroControls:ControlsHelper.HeaderFontSize" Value="14"/>
                    </Style>
                </metroControls:MetroTabControl.Resources>

                <metroControls:MetroTabControl.ItemTemplate>
                    <DataTemplate DataType="{x:Type repository:MyTabItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <TextBlock Grid.Column="0"
                                Text="{Binding Text}" Margin="0 0 5 0" VerticalAlignment="Center" HorizontalAlignment="Center"
                                Visibility="{Binding IsRenaming, Converter={StaticResource InverseBoolToVisConverter}}">
                                <TextBlock.InputBindings>
                                    <MouseBinding Gesture="LeftDoubleClick" Command="{Binding RenameTabCommand}" />
                                </TextBlock.InputBindings>
                            </TextBlock>

                            <TextBox Grid.Column="0"
                                Text="{Binding Text, Mode=TwoWay}" Margin="0 0 5 0" VerticalAlignment="Center" HorizontalAlignment="Center"
                                Visibility="{Binding IsRenaming, Converter={StaticResource BoolToVisibilityConverter}}">
                                <TextBox.InputBindings>
                                    <KeyBinding Command="{Binding RenameTabCompletedCommand}" Key="Enter" />
                                </TextBox.InputBindings>
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="LostFocus">
                                        <i:InvokeCommandAction Command="{Binding RenameTabCompletedCommand}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </TextBox>

                            <Button Grid.Row="0" Grid.Column="1"
                                Style="{DynamicResource DialogHeaderButtonStyle}"
                                VerticalAlignment="Top"
                                Width="10" Height="10" Margin="0"
                                ToolTip="Закрыть"
                                Visibility="{Binding IsInEditMode, Converter={StaticResource BoolToVisibilityConverter}}"    
                                Command="{Binding CloseTabCommand}" CommandParameter="{Binding}">
                                <materialDesign:PackIcon Kind="Close" Foreground="Red" Width="10" Height="10" Margin="0"/>
                            </Button>
                        </Grid>
                    </DataTemplate>
                </metroControls:MetroTabControl.ItemTemplate>

                <metroControls:MetroTabControl.ContentTemplate>
                    <ItemContainerTemplate>
                        <materialDesign:DrawerHost BorderThickness="0">
                            <ItemsControl
                                        DataContext="{Binding}"
                                        ItemsSource="{Binding FilteredObjects.View}"
                                        Background="Transparent"
                                        AlternationCount="{Binding RelativeSource={RelativeSource Self}, Path=Items.Count}">

                                <ItemsControl.ItemContainerStyle>
                                    <Style>
                                        <Setter Property="Canvas.Left" Value="{Binding Properties.Left}"/>
                                        <Setter Property="Canvas.Top" Value="{Binding Properties.Top}"/>
                                        <Setter Property="Canvas.ZIndex" Value="{Binding Properties.ZIndex}"/>
                                    </Style>
                                </ItemsControl.ItemContainerStyle>

                                <ItemsControl.Resources>
                                    <DataTemplate DataType="{x:Type controlViewModels:LabelViewModel}">
                                        <controls:DraggableLabel ViewModel="{Binding}"/>
                                    </DataTemplate>
                                    <DataTemplate DataType="{x:Type controlViewModels:TextBoxViewModel}">
                                        <controls:DraggableTextBox ViewModel="{Binding}"/>
                                    </DataTemplate>
                                    <DataTemplate DataType="{x:Type controlViewModels:CheckBoxViewModel}">
                                        <controls:DraggableCheckBox ViewModel="{Binding}"/>
                                    </DataTemplate>
                                    <DataTemplate DataType="{x:Type controlViewModels:RadioViewModel}">
                                        <controls:DraggableRadio ViewModel="{Binding}"/>
                                    </DataTemplate>
                                    <DataTemplate DataType="{x:Type controlViewModels:DatePickerViewModel}">
                                        <controls:DraggableDatePicker ViewModel="{Binding}"/>
                                    </DataTemplate>
                                    <DataTemplate DataType="{x:Type controlViewModels:TimePickerViewModel}">
                                        <controls:DraggableTimePicker ViewModel="{Binding}"/>
                                    </DataTemplate>
                                </ItemsControl.Resources>

                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Canvas IsItemsHost="True" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>

                            </ItemsControl>
                        </materialDesign:DrawerHost>
                    </ItemContainerTemplate>
                </metroControls:MetroTabControl.ContentTemplate>

                <!--<i:Interaction.Triggers>
                    <i:EventTrigger EventName="TabItemClosingEvent">
                        <command:EventToCommand Command="{Binding RemoveTabCommand}"
                            PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <command:EventToCommand Command="{Binding ClickTabCommand}"
                            PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>-->

            </metroControls:MetroTabControl>

            <Button Grid.Row="2" Grid.Column="1"
                Style="{DynamicResource DialogHeaderButtonStyle}" VerticalAlignment="Top"
                ToolTip="Добавить вкладку"
                Command="{Binding AddTabCommand}"
                Visibility="{Binding IsInEditMode, Converter={StaticResource BoolToVisibilityConverter}}">
                <materialDesign:PackIcon Kind="Add" />
            </Button>

            <materialDesign:Snackbar Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2"
                ActionButtonStyle="{StaticResource MaterialDesignSnackbarActionLightButton}"
                HorizontalContentAlignment="Center"
                VerticalContentAlignment="Center"
                MessageQueue="{Binding DialogsHelper.MessageQueue}">
            </materialDesign:Snackbar>

        </Grid>
    </materialDesign:DialogHost>
    
</metroControls:MetroWindow>